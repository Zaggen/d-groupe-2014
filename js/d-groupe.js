// Generated by CoffeeScript 1.7.1
(function() {
  var $, App, baseFolder, root, rootUrl,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof window !== "undefined" && window !== null ? window : global;

  $ = root.jQuery;

  root.template = function(id) {
    return _.template($('#' + id).html());
  };

  root.removeTrailingSlash = function(route) {
    var index;
    index = route.length - 1;
    if (route.charAt(index) === '/') {
      return route = route.substring(0, index);
    } else {
      return route;
    }
  };

  baseFolder = window.location.pathname.replace('/', '').split('/')[0];

  rootUrl = window.location.protocol + "//" + window.location.host + "/" + baseFolder;

  $.ajaxPrefilter(function(options) {
    options.url = rootUrl + options.url;
    return false;
  });

  root.Dgroupe = (function() {
    function Dgroupe() {}

    Dgroupe.Models = {};

    Dgroupe.Collections = {};

    Dgroupe.Views = {};

    Dgroupe.Routers = {};

    return Dgroupe;

  })();

  Dgroupe.Models.News = (function(_super) {
    __extends(News, _super);

    function News() {
      return News.__super__.constructor.apply(this, arguments);
    }

    News.prototype.defaults = {
      title: 'Lorem',
      date: '2 Abril 2014',
      content: 'Lorem ipsum dolor',
      imgSrc: 'imgs/lorem.jpg'
    };

    return News;

  })(Backbone.Model);

  Dgroupe.Collections.News = (function(_super) {
    __extends(News, _super);

    function News() {
      return News.__super__.constructor.apply(this, arguments);
    }

    News.prototype.model = Dgroupe.Models.News;

    News.prototype.url = '/news-feed';

    return News;

  })(Backbone.Collection);

  Dgroupe.Views.NewsCollection = (function(_super) {
    __extends(NewsCollection, _super);

    function NewsCollection() {
      this.yeldAdd = __bind(this.yeldAdd, this);
      this.updateView = __bind(this.updateView, this);
      return NewsCollection.__super__.constructor.apply(this, arguments);
    }

    NewsCollection.prototype.tagName = 'ul';

    NewsCollection.prototype.id = 'newsFeed';

    NewsCollection.prototype.initialize = function() {
      this.collection.bind('change', this.updateView);
      this.collection.bind('add', this.yeldAdd);
      return this.fetchCollection(1);
    };

    NewsCollection.prototype.updateView = function() {
      console.log('I changed');
      return this.render().el;
    };

    NewsCollection.prototype.yeldAdd = function() {
      return console.log('add was made');
    };

    NewsCollection.prototype.fetchCollection = function(page, fetchCurrent) {
      if (page == null) {
        page = 1;
      }
      if (fetchCurrent == null) {
        fetchCurrent = false;
      }
      console.log('fetching colecion');
      this.$el.addClass('pointEightOpcty');
      if (this.page !== page || fetchCurrent === true) {
        this.collection.fetch({
          data: {
            page: page
          },
          success: (function(_this) {
            return function() {
              return _this.render();
            };
          })(this),
          error: function(collection, response) {
            console.log('error while fetching the news collection');
            return console.log(response);
          },
          complete: (function(_this) {
            return function() {
              $('body').css('cursor', 'default');
              return _this.$el.removeClass('pointEightOpcty');
            };
          })(this)
        });
        return this.page = page;
      } else {
        return $('body').css('cursor', 'default');
      }
    };

    NewsCollection.prototype.render = function() {
      var $parent, nodes;
      $parent = $('#newsWrapper');
      $parent.empty();
      this.$el.empty();
      nodes = [];
      console.log(this.collection.toJSON());
      this.collection.each((function(_this) {
        return function(news) {
          var newsView;
          newsView = new Dgroupe.Views.News({
            model: news
          });
          newsView.delegateEvents();
          return nodes.push(newsView.render().el);
        };
      })(this));
      this.$el.append(nodes);
      $parent.append(this.el);
      return this;
    };

    return NewsCollection;

  })(Backbone.View);

  Dgroupe.Views.News = (function(_super) {
    __extends(News, _super);

    function News() {
      this.showFullEntry = __bind(this.showFullEntry, this);
      return News.__super__.constructor.apply(this, arguments);
    }

    News.prototype.tagName = 'li';

    News.prototype.className = 'entry';

    News.prototype.events = {
      'click': 'showFullEntry'
    };

    News.prototype.showFullEntry = function(e) {
      var fullNews;
      e.preventDefault();
      e.stopPropagation();
      fullNews = new Dgroupe.Views.fullNews({
        model: this.model
      });
      return $('#newsWrapper').html(fullNews.render().el);
    };

    News.prototype.template = template('newsEntries');

    News.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return News;

  })(Backbone.View);

  Dgroupe.Views.fullNews = (function(_super) {
    __extends(fullNews, _super);

    function fullNews() {
      return fullNews.__super__.constructor.apply(this, arguments);
    }

    fullNews.prototype.tagName = 'article';

    fullNews.prototype.className = 'fullEntry';

    fullNews.prototype.template = template('fullEntry');

    fullNews.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      App.backToListBtn.$el.removeClass('hidden');
      App.newsNavi.$el.addClass('hidden');
      return this;
    };

    return fullNews;

  })(Backbone.View);

  Dgroupe.Views.navigation = (function(_super) {
    __extends(navigation, _super);

    function navigation() {
      this.markAsSelected = __bind(this.markAsSelected, this);
      this.navigate = __bind(this.navigate, this);
      this.navHandler = __bind(this.navHandler, this);
      return navigation.__super__.constructor.apply(this, arguments);
    }

    navigation.prototype.el = '#NavBar';

    navigation.prototype.initialize = function() {
      this.$navItems = this.$el.find('a');
      return this.currentRoute = '';
    };

    navigation.prototype.events = {
      'click a': 'navHandler'
    };

    navigation.prototype.navHandler = function(e) {
      var $currentTarget, linkTarget;
      e.stopPropagation();
      e.preventDefault();
      $currentTarget = $(e.currentTarget);
      linkTarget = $currentTarget.attr('href');
      return this.navigate(linkTarget, $currentTarget);
    };

    navigation.prototype.navigate = function(linkTarget, $currentTarget) {
      var e;
      this.markAsSelected($currentTarget);
      try {
        App.navigate(linkTarget, true);
        return this.currentRoute = linkTarget;
      } catch (_error) {
        e = _error;
        throw new Error('This method needs a router instance defined named "app"');
      }
    };

    navigation.prototype.markAsSelected = function($el) {
      var $closestUl, selectedClass;
      selectedClass = 'current_page_item';
      $closestUl = $el.closest('ul');
      if ($closestUl.hasClass('subLvl')) {
        $closestUl.closest('.mainLvl').addClass(selectedClass);
      } else {
        $('.mainLvl').removeClass(selectedClass);
      }
      this.$navItems.removeClass(selectedClass);
      return $el.addClass(selectedClass);
    };

    navigation.prototype.findCurrentRoute = function(route) {
      var el, elLink, index, _i, _len, _ref;
      console.log('called find route ->' + route);
      index = 0;
      _ref = this.$navItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        elLink = $(el).attr('href');
        console.log(elLink);
        if (elLink.indexOf(route) !== -1) {
          break;
        } else {
          index++;
        }
      }
      return this.markAsSelected($(this.$navItems[index]));
    };

    return navigation;

  })(Backbone.View);

  Dgroupe.Views.pagination = (function(_super) {
    __extends(pagination, _super);

    function pagination() {
      return pagination.__super__.constructor.apply(this, arguments);
    }

    pagination.prototype.className = '.pageNavi';

    pagination.prototype.el = '#newsNavi';

    pagination.prototype.initialize = function() {
      this.pageQ = parseInt(this.$el.attr('data-page-quantity'));
      return this.setCurrentPageNum(1);
    };

    pagination.prototype.setCurrentPageNum = function(currentPageNum) {
      this.currentPageNum = parseInt(currentPageNum);
      return this.render();
    };

    pagination.prototype.render = function() {
      var btnsLimit, halfLimit, leftHalf, liItem, maxRange, minRange, nodes, num, rightHalf, selectedPage, skipped, x, _i, _j, _k, _ref;
      nodes = [];
      btnsLimit = 4;
      selectedPage = this.currentPageNum;
      halfLimit = btnsLimit / 2;
      leftHalf = Math.ceil(halfLimit);
      rightHalf = btnsLimit - leftHalf;
      for (x = _i = leftHalf; leftHalf <= 0 ? _i <= 0 : _i >= 0; x = leftHalf <= 0 ? ++_i : --_i) {
        if (selectedPage - x <= 0) {
          leftHalf--;
          rightHalf++;
        }
      }
      for (x = _j = rightHalf; rightHalf <= 0 ? _j <= 0 : _j >= 0; x = rightHalf <= 0 ? ++_j : --_j) {
        if (selectedPage + x >= this.pageQ) {
          leftHalf++;
          rightHalf--;
        }
      }
      minRange = selectedPage - leftHalf;
      maxRange = selectedPage + rightHalf;
      skipped = false;
      for (num = _k = 1, _ref = this.pageQ; 1 <= _ref ? _k <= _ref : _k >= _ref; num = 1 <= _ref ? ++_k : --_k) {
        if (num === 1 || (minRange <= num && num <= maxRange) || num === this.pageQ) {
          liItem = new Dgroupe.Views.pageBtn({
            pageNum: num,
            className: num === selectedPage ? 'navBtns selectedNav' : 'navBtns'
          });
          skipped = false;
        } else {
          if (!skipped) {
            liItem = new Dgroupe.Views.naviItem({
              pageNum: '...',
              className: 'navBtns dots'
            });
            skipped = true;
          }
        }
        nodes.push(liItem.render().el);
      }
      return this.$el.html(nodes);
    };

    return pagination;

  })(Backbone.View);

  Dgroupe.Views.naviItem = (function(_super) {
    __extends(naviItem, _super);

    function naviItem() {
      return naviItem.__super__.constructor.apply(this, arguments);
    }

    naviItem.prototype.tagName = 'li';

    naviItem.prototype.className = 'navBtns';

    naviItem.prototype.initialize = function(options) {
      return this.pageNum = options.pageNum;
    };

    naviItem.prototype.render = function() {
      this.$el.text(this.pageNum);
      return this;
    };

    return naviItem;

  })(Backbone.View);

  Dgroupe.Views.pageBtn = (function(_super) {
    __extends(pageBtn, _super);

    function pageBtn() {
      return pageBtn.__super__.constructor.apply(this, arguments);
    }

    pageBtn.prototype.tagName = 'li';

    pageBtn.prototype.events = {
      'click': 'changePage'
    };

    pageBtn.prototype.changePage = function(e) {
      this.$navBtns = $('.navBtns');
      this.crntPage = $(e.currentTarget).text();
      $('body').css('cursor', 'wait');
      App.newsViewCollection.fetchCollection(this.crntPage);
      return App.newsNavi.setCurrentPageNum(this.crntPage);
    };

    return pageBtn;

  })(Dgroupe.Views.naviItem);

  Dgroupe.Views.ReturnToListBtn = (function(_super) {
    __extends(ReturnToListBtn, _super);

    function ReturnToListBtn() {
      this.backToList = __bind(this.backToList, this);
      return ReturnToListBtn.__super__.constructor.apply(this, arguments);
    }

    ReturnToListBtn.prototype.initialize = function(options) {
      this.listView = options.listView;
      this.el = options.el;
      return this.nav = options.nav;
    };

    ReturnToListBtn.prototype.events = {
      'click': 'backToList'
    };

    ReturnToListBtn.prototype.backToList = function() {
      console.log(this.listView.page);
      this.listView.fetchCollection(this.listView.page, true);
      this.$el.addClass('hidden');
      return this.nav.$el.removeClass('hidden');
    };

    return ReturnToListBtn;

  })(Backbone.View);

  Dgroupe.Views.contact = (function(_super) {
    __extends(contact, _super);

    function contact() {
      this.contactHandler = __bind(this.contactHandler, this);
      return contact.__super__.constructor.apply(this, arguments);
    }

    contact.prototype.el = '#mainContact';

    contact.prototype.initialize = function() {
      return this.$alert = $(this.$el.parent().find('.alert'));
    };

    contact.prototype.events = {
      'submit': 'contactHandler'
    };

    contact.prototype.contactHandler = function(e) {
      e.preventDefault();
      return this.sendForm(this.$el.serialize());
    };

    contact.prototype.sendForm = function(data) {
      return $.ajax({
        type: "POST",
        url: this.$el.attr('action'),
        data: data,
        success: (function(_this) {
          return function(response) {
            _this.$el.before(_this.setMsgAlert(response));
            if (response.status === 'success') {
              _this.$el.addClass('setOpacityTenPercent');
              return _this.$el.find('#contactSubmit').remove();
            }
          };
        })(this),
        error: (function(_this) {
          return function() {
            var msgObj;
            msgObj = {
              status: 'failed',
              title: 'Error de conexión',
              description: 'Hubo un problema al intenta enviar tu mensaje, intentalo mas tarde'
            };
            return _this.$el.before(_this.setMsgAlert(msgObj));
          };
        })(this)
      });
    };

    contact.prototype.setMsgAlert = function(response) {
      var alertClass;
      console.log(response);
      alertClass = 'alert ' + (response.status === 'success' ? 'alertSuccess' : 'alertDanger');
      return this.$alert.removeClass().addClass(alertClass).html('<strong>' + response.title + '</strong> ' + response.description);
    };

    return contact;

  })(Backbone.View);

  Dgroupe.Routers.Router = (function(_super) {
    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      '(/)': 'home',
      'redes(/)': 'social',
      'noticias(/)': 'news',
      'contacto(/)': 'contact',
      'portafolio/on(/:slide)(/)': 'onSection',
      'portafolio/musical(/:slide)(/)': 'musicSection',
      'portafolio/corporativo(/:slide)(/)': 'corpSection',
      'portafolio/eventos(/:slide)(/)': 'eventsSection'
    };

    Router.prototype.initialize = function() {
      var $sections, corpPath, eventPath, musicPath, onPath, path, portflRoot;
      portflRoot = 'portafolio/';
      onPath = portflRoot + 'on/';
      musicPath = portflRoot + 'musical/';
      corpPath = portflRoot + 'corporativo/';
      eventPath = portflRoot + 'eventos/';
      this.onSlides = ['kukaramakara', 'lussac', 'sixxtina', 'delaire'];
      this.musicSlides = ['fotos', 'videos', 'djs', 'calendario'];
      this.corpSlides = ['fotos', 'videos'];
      this.eventSlides = ['fotos', 'videos'];
      this.slideRoutes = {
        mainSlider: ['', 'redes', 'noticias'],
        onSectionSldr: (function() {
          var _i, _len, _ref, _results;
          _ref = this.onSlides;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            path = _ref[_i];
            _results.push(onPath + path);
          }
          return _results;
        }).call(this),
        musicSectionSldr: (function() {
          var _i, _len, _ref, _results;
          _ref = this.musicSlides;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            path = _ref[_i];
            _results.push(musicPath + path);
          }
          return _results;
        }).call(this),
        eventSectionSldr: (function() {
          var _i, _len, _ref, _results;
          _ref = this.eventSlides;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            path = _ref[_i];
            _results.push(eventPath + path);
          }
          return _results;
        }).call(this),
        corpSectionSldr: (function() {
          var _i, _len, _ref, _results;
          _ref = this.corpSlides;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            path = _ref[_i];
            _results.push(corpPath + path);
          }
          return _results;
        }).call(this)
      };
      this.news = new Dgroupe.Models.News;
      this.newsCollection = new Dgroupe.Collections.News;
      this.mainNav = new Dgroupe.Views.navigation;
      this.newsViewCollection = new Dgroupe.Views.NewsCollection({
        collection: this.newsCollection
      });
      this.newsNavi = new Dgroupe.Views.pagination;
      this.backToListBtn = new Dgroupe.Views.ReturnToListBtn({
        listView: this.newsViewCollection,
        el: '#backToNewsList',
        nav: this.newsNavi
      });
      this.contact = new Dgroupe.Views.contact;
      $sections = $('body > section:not(#homeSection)');
      $sections.mouseenter((function(_this) {
        return function(e) {
          var $currentSection, sectionName;
          $currentSection = $(e.currentTarget);
          sectionName = $currentSection.attr('id');
          path = '/' + (sectionName !== void 0 ? sectionName : '');
          return _this.updateRouteNav(path);
        };
      })(this));
      return $(document).bind('onSlide', (function(_this) {
        return function(e, index, sliderId) {
          console.log("sliderId: " + sliderId);
          console.log("index: " + index);
          console.log('@slideRoutes[sliderId][index] ' + _this.slideRoutes[sliderId][index]);
          if (_this.slideRoutes[sliderId][index] !== 'undefined') {
            _this.navigate('#' + _this.slideRoutes[sliderId][index]);
            _this.mainNav.findCurrentRoute(_this.slideRoutes[sliderId][index]);
          }
          return null;
        };
      })(this));
    };

    Router.prototype.navigateOnLoad = function() {
      var linkTarget;
      linkTarget = window.location.pathname.replace('/' + baseFolder, '').replace('/', '');
      linkTarget = root.removeTrailingSlash(linkTarget);
      console.log('linkTarget: ' + linkTarget);
      this.navigate('/');
      this.navigate(linkTarget, true);
      return this.mainNav.findCurrentRoute(linkTarget);
    };

    Router.prototype.updateRouteNav = function(route) {
      this.navigate(route, false);
      return this.mainNav.findCurrentRoute(route);
    };

    Router.prototype.scrollTo = function(scrollPos, itemToSkip) {
      var e, navBarOffset, pathFragments, targetEl, targetId, _i, _len;
      if (scrollPos === Backbone.history.fragment) {
        pathFragments = scrollPos.split('/').reverse();
        for (_i = 0, _len = pathFragments.length; _i < _len; _i++) {
          targetId = pathFragments[_i];
          if (targetId !== itemToSkip && targetId !== '') {
            break;
          }
        }
        targetEl = $('#' + targetId);
        navBarOffset = 125;
        try {
          scrollPos = targetEl.offset().top - navBarOffset;
        } catch (_error) {
          e = _error;
          if (targetId === '') {
            console.error("targetId can't be empty, verify you are passing the correct arguments and there is no trailing slash in the url");
          } else {
            console.error("'#" + targetId + "' seems like an invalid id or there is no such element in the dom \n " + e.message);
          }
        }
      }
      $('html,body').stop().animate({
        scrollTop: scrollPos
      }, 800);
      return null;
    };

    Router.prototype.navigateSection = function(slide, prefix) {
      var e, index, routeKey, slidersKey;
      this.scrollTo(Backbone.history.fragment, slide);
      if (slide != null) {
        try {
          routeKey = "" + prefix + "Slides";
          slidersKey = "" + prefix + "Section";
          index = this[routeKey].indexOf(slide);
          console.log('index is ' + index);
          root.sliders[slidersKey].slideTo(index);
        } catch (_error) {
          e = _error;
          console.error('There are no slides defined in the App for this slider. \n' + e.message);
        }
      } else {
        console.warn('navigateSection was called with a null slide argument');
      }
      return null;
    };

    return Router;

  })(Backbone.Router);

  App = new Dgroupe.Routers.Router();

  Backbone.history.start({
    pushState: true,
    root: baseFolder
  });

  $((function(_this) {
    return function() {
      App.on('route:home', function() {
        App.scrollTo(0);
        root.sliders.main.slideTo('first');
        App.mainNav.findCurrentRoute('/');
        return null;
      });
      App.on('route:social', function() {
        App.scrollTo(0);
        root.sliders.main.slideTo(1);
        App.mainNav.findCurrentRoute('/redes');
        return null;
      });
      App.on('route:news', function() {
        App.scrollTo(0);
        root.sliders.main.slideTo('last');
        App.mainNav.findCurrentRoute('/noticias');
        return null;
      });
      App.on('route:onSection', function(slide) {
        return App.navigateSection(slide, 'on');
      });
      App.on('route:musicSection', function(slide) {
        return App.navigateSection(slide, 'music');
      });
      App.on('route:corpSection', function(slide) {
        return App.navigateSection(slide, 'corp');
      });
      App.on('route:eventsSection', function(slide) {
        return App.navigateSection(slide, 'event');
      });
      return App.on('route:contact', function() {
        App.scrollTo(Backbone.history.fragment);
        return null;
      });
    };
  })(this));

  $(window).load(function() {
    return App.navigateOnLoad();
  });

  $('a.route, .portfolioBtn').click(function(e) {
    var linkTarget;
    e.preventDefault();
    linkTarget = $(this).attr('href');
    console.log('linkTarget: ' + linkTarget);
    return App.navigate(linkTarget, true);
  });

  $('.fbIcon').click(function(e) {
    var hiddenEl, parent;
    e.stopPropagation();
    e.preventDefault();
    parent = $(this).closest('.socialBlock');
    hiddenEl = $(parent).find('.hidden');
    if (hiddenEl != null) {
      return hiddenEl.removeClass('hidden');
    }
  });

  $('.closeBtn').click(function() {
    var parent;
    parent = $(this).closest('.socialBlock');
    return $(parent).find('.fbBlock').addClass('hidden');
  });

  $('a.gal').has('img').colorbox({
    maxWidth: '90%',
    maxHeight: '90%',
    rel: 'on'
  });

  $('a.musicGal').has('img').colorbox({
    maxWidth: '90%',
    maxHeight: '90%',
    rel: 'musiGal'
  });

  $('a.ytGal').has('img').colorbox({
    maxWidth: '90%',
    maxHeight: '90%',
    iframe: true,
    innerWidth: 540,
    innerHeight: 346
  });

}).call(this);

//# sourceMappingURL=d-groupe.map
