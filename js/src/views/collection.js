// Generated by CoffeeScript 1.7.1
(function() {
  var Dgroupe, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof window !== "undefined" && window !== null ? window : global;

  Dgroupe = root.Dgroupe;

  Dgroupe.Views.ColectionView = (function(_super) {
    __extends(ColectionView, _super);

    function ColectionView() {
      this.updateView = __bind(this.updateView, this);
      return ColectionView.__super__.constructor.apply(this, arguments);
    }

    ColectionView.prototype.initialize = function() {
      this.collection.bind('change', this.updateView);
      return this.fetchCollection(1);
    };

    ColectionView.prototype.setloadingState = function(state) {
      var fadeClass;
      fadeClass = 'halfFade';
      if (state === 'start') {
        return this.$el.addClass(fadeClass);
      } else if (state === 'end') {
        $('body').css('cursor', 'default');
        return this.$el.removeClass(fadeClass);
      } else {
        return console.warn(state + 'Is not a valid state for seTloadingState');
      }
    };

    ColectionView.prototype.updateView = function() {
      return this.render().el;
    };

    ColectionView.prototype.fetchCollection = function(page, fetchCurrent) {
      if (page == null) {
        page = 1;
      }
      if (fetchCurrent == null) {
        fetchCurrent = false;
      }
      this.setloadingState('start');
      if (this.page !== page || fetchCurrent === true) {
        this.page = page;
        return this.collection.fetch({
          data: {
            page: page
          },
          success: (function(_this) {
            return function() {
              return _this.render();
            };
          })(this),
          error: function(collection, response) {
            console.log('Error while fetching the collection');
            return console.log(response);
          },
          complete: (function(_this) {
            return function() {
              return _this.setloadingState('end');
            };
          })(this)
        });
      } else {
        return this.setloadingState('end');
      }
    };

    return ColectionView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=collection.map
