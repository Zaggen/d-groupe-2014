// Generated by CoffeeScript 1.7.1
(function() {
  var Dgroupe, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof window !== "undefined" && window !== null ? window : global;

  Dgroupe = root.Dgroupe;

  Dgroupe.Views.CollectionView = (function(_super) {
    __extends(CollectionView, _super);

    function CollectionView() {
      this.render = __bind(this.render, this);
      return CollectionView.__super__.constructor.apply(this, arguments);
    }

    CollectionView.prototype.initialize = function(options) {
      this.listenTo(this.collection, 'sync', this.render);
      this.itemViewClass = options.itemViewClass;
      return this.hideClass = 'hidden';
    };

    CollectionView.prototype.renderCollectionNodes = function() {
      var nodes;
      nodes = [];
      this.collection.each((function(_this) {
        return function(itemModel) {
          var itemView;
          itemView = new _this.itemViewClass({
            model: itemModel
          });
          itemView.delegateEvents();
          return nodes.push(itemView.render().el);
        };
      })(this));
      return nodes;
    };

    CollectionView.prototype.hideLoader = function() {
      console.log('hiding loader');
      if (this.$progressLoader == null) {
        this.$progressLoader = this.$el.find('.progress');
      }
      console.log(this.$progressLoader);
      return this.$progressLoader.addClass(this.hideClass);
    };

    CollectionView.prototype.showLoader = function() {
      console.log('showing loader');
      if (this.$progressLoader == null) {
        this.$progressLoader = this.$el.find('.progress');
      }
      console.log(this.$progressLoader);
      return this.$progressLoader.removeClass(this.hideClass);
    };

    CollectionView.prototype.render = function() {
      var nodes;
      if (_.isEmpty(this.collection.models)) {
        console.log('collection is empty, fetching it now');
        this.collection.fetchPage(1);
      } else {
        console.log('collection fetched, now rendering');
        nodes = this.renderCollectionNodes();
        this.$el.html(nodes);
      }
      this.delegateEvents();
      return this;
    };

    return CollectionView;

  })(Backbone.View);

  Dgroupe.Views.CompositeView = (function(_super) {
    __extends(CompositeView, _super);

    function CompositeView() {
      return CompositeView.__super__.constructor.apply(this, arguments);
    }

    CompositeView.prototype.initialize = function(options) {
      var _ref;
      CompositeView.__super__.initialize.apply(this, arguments);
      return this.querySelector = (_ref = options.querySelector) != null ? _ref : 'ul';
    };

    CompositeView.prototype.render = function() {
      var collectionView, nodes;
      this.$el.html(this.template());
      if (_.isEmpty(this.collection.models)) {
        console.log('collection is empty, fetching it now');
        this.collection.fetchPage(1);
      } else {
        console.log('collection fetched, now rendering');
        collectionView = this.$el.find(this.querySelector);
        nodes = this.renderCollectionNodes();
        collectionView.html(nodes);
      }
      this.delegateEvents();
      return this;
    };

    return CompositeView;

  })(Dgroupe.Views.CollectionView);

}).call(this);

//# sourceMappingURL=collection.map
