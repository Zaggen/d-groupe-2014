// Generated by CoffeeScript 1.7.1
(function() {
  var Dgroupe, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof window !== "undefined" && window !== null ? window : global;

  Dgroupe = root.Dgroupe;

  Dgroupe.Views.Layout = (function(_super) {
    __extends(Layout, _super);

    function Layout() {
      return Layout.__super__.constructor.apply(this, arguments);
    }

    Layout.prototype.initialize = function() {
      this.fadeInClass = 'fastFadeIn';
      this.fadeOutClass = 'fastFadeOut';
      this.firstLoad = true;
      return this.oldViews = [];
    };

    Layout.prototype.fadeOut = function() {
      return this.$el.removeClass(this.fadeInClass).addClass(this.fadeOutClass);
    };

    Layout.prototype.fadeIn = function(region) {
      return this.$el.removeClass(this.fadeOutClass).addClass(this.fadeInClass);
    };

    Layout.prototype.closeOldViews = function() {
      var view, _i, _len, _ref, _results;
      console.log('Views to be closed', this.oldViews);
      _ref = this.oldViews;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        view = _ref[_i];
        _results.push(view.close());
      }
      return _results;
    };


    /*
     * Takes an array containing one or more view instance as argument, adds a fadeOut fx to hide the current content
     * then it renders each view instance from the array and extracts its node element (el) and pushes it into an array
     * that is later (after the fadeIn completes) added as the html content of the layoutView
     */

    Layout.prototype.show = function(views) {
      var delay, node, view, viewNodes, _i, _len;
      console.log('Ready to show these views:', views);
      if (!this.firstLoad) {
        delay = 500;
        this.fadeOut();
        viewNodes = [];
        for (_i = 0, _len = views.length; _i < _len; _i++) {
          view = views[_i];
          node = view.render().el;
          viewNodes.push(node);
        }
        _.delay(_.bind(function() {
          this.closeOldViews();
          console.log('Done closing views, now we call html() with the new nodes->', viewNodes);
          this.$el.html(viewNodes);
          this.fadeIn();
          return this.oldViews = views;
        }, this), delay);
      } else {
        console.log('But is the first load so we do nothing');
        this.oldViews = views;
        this.firstLoad = false;
      }
      return this;
    };

    return Layout;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=layout.map
