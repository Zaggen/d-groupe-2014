// Generated by CoffeeScript 1.7.1
(function() {
  var Dgroupe, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof window !== "undefined" && window !== null ? window : global;

  Dgroupe = root.Dgroupe;

  Dgroupe.Views.Lightbox = (function(_super) {
    __extends(Lightbox, _super);

    function Lightbox() {
      this.setLimits = __bind(this.setLimits, this);
      this.show = __bind(this.show, this);
      this.set = __bind(this.set, this);
      return Lightbox.__super__.constructor.apply(this, arguments);
    }

    Lightbox.prototype.className = 'lightBox hidden';

    Lightbox.prototype.id = 'lightBox';

    Lightbox.prototype.events = {
      'click .closeBtn, .overlay': 'hide',
      'click .prevBtn': 'prev',
      'click .nextBtn': 'next'
    };

    Lightbox.prototype.initialize = function() {
      console.log('a new lightbox has been instanciated', this);
      this.hideClass = 'hidden';
      this.currentIndex = 0;
      $(document).on('setLightbox', this.set);
      $(document).on('showLightBox', this.show);
      this.closed = true;
      if ($('#' + this.id) != null) {
        console.log("setting el to #lightBox");
        this.setElement('#' + this.id);
      } else {
        this.render();
      }
      this.setKeyBinding();
      this.setResizeHandler();
      return this;
    };

    Lightbox.prototype.setResizeHandler = function() {
      this.resized = false;
      $(window).on('resize', (function(_this) {
        return function() {
          _this.resized = true;
          if (_this.imgSize != null) {
            return _this.resizeWindow(_this.imgSize.width, _this.imgSize.height, false);
          }
        };
      })(this));
      return this;
    };

    Lightbox.prototype.setKeyBinding = function() {
      return $(document).keydown((function(_this) {
        return function(e) {
          if (!_this.closed) {
            if (e.which === 37) {
              return _this.prev();
            } else if (e.which === 39) {
              return _this.next();
            }
          }
        };
      })(this));
    };

    Lightbox.prototype.set = function(options) {
      var _ref, _ref1;
      console.log('collection about to be set');
      if (this.collection !== options.collection) {
        this.collection = options.collection;
        this.settings = {
          mode: (_ref = options.mode) != null ? _ref : 'images',
          cycle: (_ref1 = options.cycle) != null ? _ref1 : true
        };
        if (_.isEmpty(this.collection.models)) {
          return console.warn('Collection is empty');
        }
      }
    };

    Lightbox.prototype.show = function(e) {
      var model;
      this.currentIndex = e.modelIndex;
      console.log('showing current index:', this.currentIndex);
      this.$el.removeClass(this.hideClass);
      model = this.collection.at(this.currentIndex).toJSON();
      this.loadContent(model, true);
      return this.closed = false;
    };

    Lightbox.prototype.hide = function() {
      this.$el.addClass(this.hideClass);
      this.resizeWindow(0, 0, true);
      this.$content.empty();
      this.imgSize = null;
      return this.closed = true;
    };

    Lightbox.prototype.hideLoader = function() {
      if (this.$progressLoader == null) {
        this.$progressLoader = this.$el.find('.progress');
      }
      return this.$progressLoader.addClass(this.hideClass);
    };

    Lightbox.prototype.showLoader = function() {
      if (this.$progressLoader == null) {
        this.$progressLoader = this.$el.find('.progress');
      }
      return this.$progressLoader.removeClass(this.hideClass);
    };

    Lightbox.prototype.prev = function() {
      var model;
      if (this.currentIndex !== 0) {
        this.currentIndex--;
      } else {
        if (this.settings.cycle) {
          this.currentIndex = this.collection.length - 1;
        }
      }
      model = this.collection.at(this.currentIndex).toJSON();
      return this.loadContent(model);
    };

    Lightbox.prototype.next = function() {
      var model;
      if (this.currentIndex < this.collection.length - 1) {
        this.currentIndex++;
      } else {
        if (this.settings.cycle) {
          this.currentIndex = 0;
        }
      }
      model = this.collection.at(this.currentIndex).toJSON();
      return this.loadContent(model);
    };

    Lightbox.prototype.loadContent = function(modelObj, addTransition) {
      if (addTransition == null) {
        addTransition = false;
      }
      if (this.settings.mode === 'images') {
        return this.loadImage(modelObj, addTransition);
      } else {
        return this.loadIframe(modelObj, addTransition);
      }
    };

    Lightbox.prototype.loadImage = function(modelObj, addTransition) {
      var $img, img;
      if (addTransition == null) {
        addTransition = false;
      }
      console.log('load image');
      this.showLoader();
      if (this.$content == null) {
        this.$content = this.$el.find('#lightboxContent');
      }
      img = new Image();
      $img = $(img);
      $img.one('load', (function(_this) {
        return function() {
          _this.imgSize = {
            width: img.width,
            height: img.height
          };
          _this.$content.html(img);
          _this.resizeWindow(_this.imgSize.width, _this.imgSize.height, addTransition);
          _this.hideLoader();
          return _this.preloadNextImage();
        };
      })(this));
      $img.one('error', function() {
        return console.log('error, img not found');
      });
      img.src = modelObj.fullImg;
      if (img.complete) {
        return $img.load();
      }
    };

    Lightbox.prototype.preloadNextImage = function() {
      var img, index, modelObj;
      if (this.currentIndex < this.collection.length - 1) {
        index = this.currentIndex + 1;
      } else {
        if (this.settings.cycle) {
          index = 0;
        }
      }
      modelObj = this.collection.at(index).toJSON();
      img = new Image();
      return img.src = modelObj.fullImg;
    };

    Lightbox.prototype.loadIframe = function(modelObj, addTransition) {
      var $iframe, iframeH, iframeW;
      if (addTransition == null) {
        addTransition = false;
      }
      if (this.$content == null) {
        this.$content = this.$el.find('#lightboxContent');
      }
      this.showLoader();
      iframeW = 600;
      iframeH = 390;
      $iframe = $('<iframe />').attr('src', modelObj.embedUrl).css({
        width: iframeW,
        height: iframeH
      });
      this.$content.html($iframe);
      this.resizeWindow(iframeW, iframeH);
      if ($iframe.get(0).complete) {
        return this.hideLoader();
      } else {
        return $iframe.load((function(_this) {
          return function() {
            return _this.hideLoader();
          };
        })(this));
      }
    };

    Lightbox.prototype.resizeWindow = function(width, height, addTransition) {
      var hMultiplier, left, multiplier, top, wMultiplier;
      if (addTransition == null) {
        addTransition = false;
      }
      console.log('reziseWindow called with the following args: w:' + width + ', h:' + height);
      if (this.$lightBoxWindow == null) {
        this.$lightBoxWindow = this.$el.find('.window');
      }
      if (this.resized || (this.limits == null)) {
        this.setLimits();
        this.resized = false;
      }
      if (width > this.limits.width || height > this.limits.height) {
        wMultiplier = this.limits.width / width;
        hMultiplier = this.limits.height / height;
        multiplier = wMultiplier < hMultiplier ? wMultiplier : hMultiplier;
        console.log('multiplier', multiplier);
        width *= multiplier;
        height *= multiplier;
      }
      top = height / 2;
      left = width / 2;
      if (addTransition) {
        this.$lightBoxWindow.addClass('transitionAll');
      } else {
        this.$lightBoxWindow.removeClass('transitionAll');
      }
      console.log('resizing to ' + width);
      this.$lightBoxWindow.css({
        width: "" + width + "px",
        height: "" + height + "px",
        margin: "-" + top + "px 0 0 -" + left + "px"
      });
      this.resized = false;
      return this;
    };

    Lightbox.prototype.setLimits = function() {
      var percentLimint;
      console.log('setting limits');
      percentLimint = 0.8;
      this.limits = {
        width: this.$el.outerWidth() * percentLimint,
        height: this.$el.outerHeight() * percentLimint
      };
      return console.log('@limits', this.limits);
    };

    Lightbox.prototype.close = function() {
      $(document).off('showLightBox', this.show);
      return Lightbox.__super__.close.apply(this, arguments);
    };

    Lightbox.prototype.render = function() {
      this.$el.html(this.template());
      return this;
    };

    return Lightbox;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=lightbox.map
