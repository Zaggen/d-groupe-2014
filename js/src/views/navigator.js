// Generated by CoffeeScript 1.7.1
(function() {
  var Dgroupe, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof window !== "undefined" && window !== null ? window : global;

  Dgroupe = root.Dgroupe;

  Dgroupe.Views.navigation = (function(_super) {
    __extends(navigation, _super);

    function navigation() {
      this.scrollTop = __bind(this.scrollTop, this);
      this.toggleNavBar = __bind(this.toggleNavBar, this);
      this.markAsSelected = __bind(this.markAsSelected, this);
      this.navigate = __bind(this.navigate, this);
      this.navHandler = __bind(this.navHandler, this);
      return navigation.__super__.constructor.apply(this, arguments);
    }

    navigation.prototype.el = '#mainNav';

    navigation.prototype.events = {
      'mousedown a:not(.current_page_item)': 'navHandler',
      'click a': 'preventDefault',
      'click header, li:not(.mainLvl)': 'toggleNavBar',
      'click .mainLvl': 'scrollTop'
    };

    navigation.prototype.initialize = function() {
      this.$navList = $(this.$el.children('ul'));
      this.$navItems = this.$navList.children('li');
      this.$navLinks = this.$navItems.find('a');
      this.currentRoute = '';
      this.mobileClosed = true;
      this.widthToTriggerMobile = 851;
      this.setResizeHandler();
      return this.setNavListHeight();
    };

    navigation.prototype.setResizeHandler = function() {
      $(window).on('resize', (function(_this) {
        return function() {
          return _this.setNavListHeight();
        };
      })(this));
      return this;
    };

    navigation.prototype.isMobileActive = function() {
      if (window.innerWidth < this.widthToTriggerMobile) {
        return true;
      } else {
        return false;
      }
    };

    navigation.prototype.setNavListHeight = function() {
      var aviableHeight, newHeight;
      if (this.isMobileActive()) {
        if (this.listHeight == null) {
          this.listHeight = $(this.$navItems.get(0)).outerHeight() * this.$navItems.filter(':not(.hideInMobile)').length;
        }
        aviableHeight = window.innerHeight;
        newHeight = aviableHeight > this.listHeight ? this.listHeight : aviableHeight;
        newHeight = "" + newHeight + "px";
      } else {
        newHeight = 'auto';
        if (!this.mobileClosed) {
          this.closeMobileMenu();
        }
      }
      return this.$navList.css("height", newHeight);
    };

    navigation.prototype.preventDefault = function(e) {
      return e.preventDefault();
    };

    navigation.prototype.navHandler = function(e) {
      var $currentTarget, linkTarget;
      e.stopPropagation();
      e.preventDefault();
      $currentTarget = $(e.currentTarget);
      linkTarget = $currentTarget.attr('href');
      return this.navigate(linkTarget, $currentTarget);
    };

    navigation.prototype.navigate = function(linkTarget, $currentTarget) {
      this.markAsSelected($currentTarget);
      return Backbone.history.navigate(linkTarget, {
        trigger: true
      });
    };

    navigation.prototype.markAsSelected = function($el) {
      var selectedClass;
      selectedClass = 'current_page_item';
      this.$navLinks.removeClass(selectedClass);
      return $el.addClass(selectedClass);
    };

    navigation.prototype.findCurrentRoute = function(route) {
      var el, elLink, index, _i, _len, _ref;
      index = 0;
      _ref = this.$navLinks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        elLink = $(el).attr('href');
        if (elLink.indexOf(route) !== -1) {
          break;
        } else {
          index++;
        }
      }
      return this.markAsSelected($(this.$navLinks[index]));
    };

    navigation.prototype.toggleNavBar = function(e) {
      e.stopPropagation();
      if (this.isMobileActive()) {
        if (this.mobileClosed) {
          return this.openMobileMenu();
        } else {
          return this.closeMobileMenu();
        }
      }
    };

    navigation.prototype.openMobileMenu = function() {
      this.$el.addClass('openMenu');
      return this.mobileClosed = false;
    };

    navigation.prototype.closeMobileMenu = function() {
      this.$el.removeClass('openMenu');
      return this.mobileClosed = true;
    };

    navigation.prototype.scrollTop = function() {
      return this.$navList.stop().animate({
        scrollTop: this.listHeight
      }, 800);
    };

    return navigation;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=navigator.map
