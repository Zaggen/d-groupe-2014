// Generated by CoffeeScript 1.7.1
(function() {
  var Dgroupe, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof window !== "undefined" && window !== null ? window : global;

  Dgroupe = root.Dgroupe;

  Dgroupe.Views.pagination = (function(_super) {
    __extends(pagination, _super);

    function pagination() {
      return pagination.__super__.constructor.apply(this, arguments);
    }

    pagination.prototype.className = '.pageNavi';

    pagination.prototype.tagName = 'ul';

    pagination.prototype.initialize = function(options) {
      this.feed = options.collectionView;
      this.pageQ = parseInt(this.$el.attr('data-page-quantity'));
      return this.setCurrentPageNum(1);
    };

    pagination.prototype.setCurrentPageNum = function(currentPageNum) {
      this.currentPageNum = parseInt(currentPageNum);
      return this.render();
    };

    pagination.prototype.updatePage = function(currentPageNum) {
      this.setCurrentPageNum(currentPageNum);
      return this.feed.fetchCollection(currentPageNum);
    };

    pagination.prototype.render = function() {
      var btnsLimit, halfLimit, leftHalf, liItem, maxRange, minRange, nodes, num, rightHalf, selectedPage, skipped, x, _i, _j, _k, _ref;
      nodes = [];
      btnsLimit = 4;
      selectedPage = this.currentPageNum;
      halfLimit = btnsLimit / 2;
      leftHalf = Math.ceil(halfLimit);
      rightHalf = btnsLimit - leftHalf;
      for (x = _i = leftHalf; leftHalf <= 0 ? _i <= 0 : _i >= 0; x = leftHalf <= 0 ? ++_i : --_i) {
        if (selectedPage - x <= 0) {
          leftHalf--;
          rightHalf++;
        }
      }
      for (x = _j = rightHalf; rightHalf <= 0 ? _j <= 0 : _j >= 0; x = rightHalf <= 0 ? ++_j : --_j) {
        if (selectedPage + x >= this.pageQ) {
          leftHalf++;
          rightHalf--;
        }
      }
      minRange = selectedPage - leftHalf;
      maxRange = selectedPage + rightHalf;
      skipped = false;
      for (num = _k = 1, _ref = this.pageQ; 1 <= _ref ? _k <= _ref : _k >= _ref; num = 1 <= _ref ? ++_k : --_k) {
        if (num === 1 || (minRange <= num && num <= maxRange) || num === this.pageQ) {
          liItem = new Dgroupe.Views.pageBtn({
            pageNum: num,
            className: num === selectedPage ? 'navBtns selectedNav' : 'navBtns',
            parentInstance: this
          });
          skipped = false;
        } else {
          if (!skipped) {
            liItem = new Dgroupe.Views.naviItem({
              pageNum: '...',
              className: 'navBtns dots'
            });
            skipped = true;
          }
        }
        nodes.push(liItem.render().el);
      }
      this.$el.html(nodes);
      return this;
    };

    return pagination;

  })(Backbone.View);

  Dgroupe.Views.naviItem = (function(_super) {
    __extends(naviItem, _super);

    function naviItem() {
      return naviItem.__super__.constructor.apply(this, arguments);
    }

    naviItem.prototype.tagName = 'li';

    naviItem.prototype.className = 'navBtns';

    naviItem.prototype.initialize = function(options) {
      return this.pageNum = options.pageNum;
    };

    naviItem.prototype.render = function() {
      this.$el.text(this.pageNum);
      return this;
    };

    return naviItem;

  })(Backbone.View);

  Dgroupe.Views.pageBtn = (function(_super) {
    __extends(pageBtn, _super);

    function pageBtn() {
      return pageBtn.__super__.constructor.apply(this, arguments);
    }

    pageBtn.prototype.events = {
      'click': 'changePage'
    };

    pageBtn.prototype.initialize = function(options) {
      pageBtn.__super__.initialize.apply(this, arguments);
      return this.navi = options.parentInstance;
    };

    pageBtn.prototype.changePage = function(e) {
      this.$navBtns = $('.navBtns');
      this.crntPage = $(e.currentTarget).text();
      $('body').css('cursor', 'wait');
      return this.navi.updatePage(this.crntPage);
    };

    return pageBtn;

  })(Dgroupe.Views.naviItem);

  Dgroupe.Views.ReturnToListBtn = (function(_super) {
    __extends(ReturnToListBtn, _super);

    function ReturnToListBtn() {
      this.backToList = __bind(this.backToList, this);
      return ReturnToListBtn.__super__.constructor.apply(this, arguments);
    }

    ReturnToListBtn.prototype.initialize = function(options) {
      this.listView = options.listView;
      this.el = options.el;
      return this.nav = options.nav;
    };

    ReturnToListBtn.prototype.events = {
      'click': 'backToList'
    };

    ReturnToListBtn.prototype.backToList = function() {
      this.listView.fetchCollection(this.listView.page, true);
      this.$el.addClass('hidden');
      return this.nav.$el.removeClass('hidden');
    };

    return ReturnToListBtn;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=pagination.map
